arouter: app组件化改造的框架:
解决的问题是: 模块间(注意没有依赖)的路由,通信,解耦

路由类型: 四大组件与 Iprovider:提供服务接口,
还有拦截器interceptor: 所有跳转都会经过他:

arouter初始化什么: 组信息 Warehouse { Map<String, Class<? extends IRouteGroup>> groupsIndex }

用到的技术:  ASM  JAVAPOET: 简称:apt
apt: 根据注解生成对应的class
ASM: 自动注册组的信息 Map<String, Class<? extends IRouteGroup>> routes 组名 -> IRouteGroup: 加载组底下路劲所对应的路由信息

apt：在编译期间收集 Route, interceptor ,autoware, params

xxxxx$$ARouter$$Autowired: 自动注入: 没看这个逻辑之前,我以为是反射实现, 发现看了源码之后他并不是, apt
针对自动注入的属性在同一个包名下生成了对应的java: 基于性能考虑吧,调用注入的方法传了this进去, 直接强
转, 因为是在同一个包底下, 直接用 .号引用, 然后从intent去取就可以了

还是intent





1 组件化改造框架
2 支持模块间的路由,通信(在没有依赖的情况下),既然没有依赖了就解耦了呗
interceptors:

LogisticsCenter

ACTIVITY(0, "android.app.Activity"),
    SERVICE(1, "android.app.Service"),
    PROVIDER(2, "com.alibaba.android.arouter.facade.template.IProvider"),
    CONTENT_PROVIDER(-1, "android.app.ContentProvider"),
    BOARDCAST(-1, ""),
    METHOD(-1, ""),
    FRAGMENT(-1, "android.app.Fragment"),
    UNKNOWN(-1, "Unknown route type");


tab 这张表什么时候创建的

Warehouse { // 仓库

// Cache route and metas
// 他的值现在又4个，比如 test -> {Class@16178} "class com.alibaba.android.arouter.routes.ARouter$$Group$$test"
    static Map<String, Class<? extends IRouteGroup>> groupsIndex = new HashMap<>();

    // 路劲 对应着 路由信息 path --> RouteMeta(group组, path配置的路径, destintion目标class)
    static Map<String, RouteMeta> routes = new HashMap<>();

    // Cache provider
    static Map<Class, IProvider> providers = new HashMap<>();
    static Map<String, RouteMeta> providersIndex = new HashMap<>();

    // Cache interceptor
    ("More than one interceptors use same priority [%s]");
    static Map<Integer, Class<? extends IInterceptor>> interceptorsIndex = new UniqueKeyTreeMap<>
    // 所有的拦截器,所有的跳转获取都会经过拦截器列表
    static List<IInterceptor> interceptors = new ArrayList<>();
    什么注册的:

}

RouteMeta {
    private RouteType type;         // Type of route
    private Element rawType;        // Raw type of
    private Class<?> destination;   // Destination 目标class
    private String path;            // Path of route  例 :/test/activity
    private String group;           // test
}

public class ARouter$$Group$$test implements IRouteGroup

1 问题：实现IRouteGroup的class是如何生成的,一定是注解处理RouteProcessor extends BaseProcessor


arouter: 组件化改造框架
需要解决的问题是，模块间没有依赖的情况下相互调用
接口下沉, 所有业务模块依赖这个接口通信, 业务提供方实现这个接口,配置这个路劲, Arouter帮你实例化调用,
所以只有一个实例, cache,

table 组信息加载组信息 Map<String, Class<? extends IRouteGroup>> 组名与加载组名底下的所有路由信息的实现类
实现类(apt 自动生成的)
arouter 初始化会初始化组信息: 这里你会看到LogisticsCenter.loadRouterMap() 这个函数只是做了一个flag标识
从java代码看,但是并没有加载路由信息, 奇怪了,看注释，arouter里面有一个插件会在这个函数里面插入一些代码,
通过ams(编译的visitMethod的时候注入了自己码,
(asm会debug,不然打log,打多了会把日志冲掉, apt也是一样的能调试),在loadRouterMap方法最后一行)自动调用
register(className:自动生成)组信息: 其实就是往map里面填充值,

Iprovider: 暴露业务接口

interceptor: 所有的跳转前都会经过所有的拦截器

传参问题: 普通对象直接传, list与map都可以(因为这两个都实现序列化)


最后关于三方具体应用框架的学习, 其实也很简单
下载源码, 调试(会debug, )与打log

很像binder了











